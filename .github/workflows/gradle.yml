name: Java CI/CD with Gradle and Docker Compose

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # Docker 이미지를 빌드하고 Docker Hub에 푸시하는 과정 (CI)
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 애플리케이션 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      # Docker 이미지 빌드
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/tranner .

      # DockerHub 로그인
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker Hub에 이미지 푸시
      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/tranner

  # 배포 작업 (CD)
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 서버에서 Docker Hub 로그인
            docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD

            # 기존 컨테이너 및 네트워크 정리 후 새로운 컨테이너 실행
            cd /home/ubuntu

            # 환경 변수 파일 준비 (필요한 경우)
            echo "MYSQL_URL=${{ secrets.MYSQL_URL }}" > .env
            echo "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}" >> .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "JWT_SECRETKEY=${{ secrets.JWT_SECRETKEY }}" >> .env

            # 기존 컨테이너 중지 및 삭제
            docker-compose down

            # 최신 이미지 가져오기
            docker-compose pull

            # 컨테이너 실행
            docker-compose up -d
